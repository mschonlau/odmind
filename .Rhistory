?devtools::test_coverage()
devtools::test_coverage()
library(covr) # Test Coverage for Packages
covr::codecov(token = "XEXF4GC575")
library(covr) # Test Coverage for Packages
covr::codecov(token = "7a8f5a04-8349-4ba5-ae38-9d8f420d39ed")
detach("package:odmind", unload = TRUE)
library(covr) # Test Coverage for Packages
covr::codecov(token = "7a8f5a04-8349-4ba5-ae38-9d8f420d39ed")
library(covr) # Test Coverage for Packages
covr::codecov(token = "XEXF4GC575")
rhub::check_for_cran()
usethis::use_travis()
usethis::use_github_actions()
goodpractice::gp()
styler:::style_active_pkg()
inteRgrate::check_pkg()
library(snow)
detach("package:snow", unload = TRUE)
library(doSNOW)
detach("package:doSNOW", unload = TRUE)
detach("package:snow", unload = TRUE)
library(snow)
detach("package:snow", unload = TRUE)
inteRgrate::check_lintr()
inteRgrate::check_tidy_description()
usethis::use_tidy_description()
inteRgrate::check_r_filenames()
library(odmind)
library(odmind)
?odmind
remotes::install_github("mschonlau/odmind")
library(odmind)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# load the package
library(odmind)
data("testdata")
str(testdata)
summary(testdata)
data("testdata")
summary(testdata)
# Load the package data
data("testdata")
summary(testdata$od_result)
# Load the package data
data("testdata")
str(testdata$od_result)
testdata$od_result
glimpse(testdata$od_result)
preview(testdata$od_result)
show(testdata$od_result)
class(testdata$od_result)
# Load the package data
data("testdata")
str(testdata$od_result$distance)
# Load the package data
data("testdata")
head(testdata$od_result$distance, 5)
# Load the package data
data("testdata")
summary(testdata$od_result$distance)
# Load the package data
data("testdata")
str(testdata$od_result$distance)
testdata$od_result$sources
str(testdata$od_result$sources)
# Load the package data
data("testdata")
str(testdata$od_result$distance)
str(testdata$od_result$duration)
head(testdata$od_result$sources, 5)
?knitr::kable()
# Load the package data
data("testdata")
str(testdata$od_result$distance)
str(testdata$od_result$duration)
knitr::kable(testdata$od_result$sources, 5)
# Load the package data
data("testdata")
str(testdata$od_result$distance)
str(testdata$od_result$duration)
knitr::kable(testdata$od_result$sources)
# Load the package data
data("testdata")
knitr::kable(testdata$od_result$distance)
knitr::kable(testdata$od_result$duration)
knitr::kable(testdata$od_result$sources)
# Load the package data
data("testdata")
knitr::kable(testdata$od_result$distance[1:5, 1:5])
knitr::kable(testdata$od_result$duration[1:5, 1:5])
knitr::kable(testdata$od_result$sources[,1:5])
# Load the package data
data("testdata")
knitr::kable(testdata$od_result$distance[1:5, 1:5])
knitr::kable(testdata$od_result$duration[1:5, 1:5])
knitr::kable(testdata$od_result$sources[1:5,])
# Load the package data
data("testdata")
pander::pandoc.table(testdata$od_result$distance[1:5, 1:5])
# Load the package data
data("testdata")
summary(testdata)
# Load the package data
data("testdata")
summary(testdata)
summary(testdata$od_result)
# Load the package data
data("testdata")
knitr::kable(summary(testdata$od_result))
knitr::kable(summary(testdata$grid_500m))
testdata$grid_500m
head(testdata$grid_500m, 5)
str(testdata$grid_500m)
class(testdata$grid_500m)
# Load the package data
data("testdata")
knitr::kable(summary(testdata$od_result))
knitr::kable(head(testdata$grid_500m, 5))
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# A preview of the grid with 500m resolation
knitr::kable(plot(testdata$grid_500m$geometry))
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# A preview of the grid with 500m resolation
plot(testdata$grid_500m$geometry)
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# A preview of the grid with 500m resolation
plot.sf(testdata$grid_500m$geometry)
# Load the package data
library(sf)
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# A preview of the grid with 500m resolation
plot.sf(testdata$grid_500m$geometry)
# Load the package data
library(sf)
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# A preview of the grid with 500m resolation
plot(testdata$grid_500m$geometry)
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
library(sf)
library(dplyr)
# A preview of the data included in the package
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(3035)
plot(testdata$grid_500m$geometry, reset = FALSE)
plot(st_transform(testdata$od_result$sources, 3035)$geom, add = TRUE)
plot(targets_sf, col = "red", pch = 20, add = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# load the package
library(odmind)
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
library(sf)
library(dplyr)
# A preview of the data included in the package
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(3035)
plot(testdata$grid_500m$geometry, col = "darkgrey", reset = FALSE)
plot(st_transform(testdata$od_result$sources, 3035)$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
library(sf)
library(dplyr)
# A preview of the data included in the package
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(3035)
plot(testdata$grid_500m$geometry, border = "darkgrey", reset = FALSE)
plot(st_transform(testdata$od_result$sources, 3035)$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
# Load the package data
data("testdata")
# Basic information about the odm-list object
knitr::kable(summary(testdata$od_result))
library(sf)
library(dplyr)
# A preview of the data included in the package
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(3035)
plot(testdata$grid_500m$geometry, border = "darkgrey", reset = FALSE)
plot(st_transform(testdata$od_result$sources, 3035)$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
grid_500m
?calc_odm_multicore
?makeCluster
??makeCluster
?registerDo
?parallel
??parallel
knitr::kable(head(testdata$od_result$sources, 5))
?create_time_distance_by_cat_sf()
?create_time_distance_n_by_cat_sf
?create_cumulative_sf
?create_cumulative_by_cat_sf
?create_potential_sf
?create_potential_by_cat_sf
?create_time_distance_sf
The following example shows the calculation of the distance and duration to the nearest target location using the provided dataset:
```{r message=FALSE, fig.align='center', fig.width= 6.5}
result <- create_time_distance_sf(testdata$od_result)
par(mar = c(0,0,1,0))
plot(result["Min_Dist"], )
```
?plot
?aggregate_expenses()
?aggregate_accumulation()
aggregate_coverage_rate_by_threshold()
?aggregate_coverage_rate_by_threshold()
min_dist_time_sf <- create_time_distance_sf(testdata$od_result)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
result_sf
min_dist_time_sf
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geometry, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(4674)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(4674)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
st_set_crs(4326) %>%
st_transform(4674)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4674)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4674)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
targets_sf
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4647)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], border = "white", key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4647)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], border = "grey", key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4647)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], border = "grey", key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, pch = 20, cex = 1, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
library(dplyr)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result) %>%
sf::st_transform(4647)
# Add targets for plotting
targets_sf <- sf::st_as_sf(testdata$od_result$targets, coords = c("x", "y")) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(4647)
result_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
par(mar = c(0,0,1,0))
# MedianDist could be switched to MedianTime
plot(result_sf["MedianDist"], border = "darkgrey", key.pos = 1, reset = FALSE)
plot(min_dist_time_sf$geom, pch = 20, cex = 1, add = TRUE)
plot(targets_sf$geometry, col = "red", pch = 20, cex = .8, add = TRUE)
?create_cumulative_sf
?create_potential_sf
?aggregate_coverage_rate_by_threshold
min_dist_time_sf <- create_time_distance_sf(testdata$od_result)
expenses_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
cnt_sf <- create_cumulative_sf(odm_object = testdata$od_result,
filter_value_type = "distance",
accessibility_filter_value = 750,
search_direction = "to_target")
cumulative_sf <- aggregate_accumulation(aoi_sf = testdata$grid_500m,
pnt_sf = cnt_sf,
id_col = "id",
crs = 4647)
pot_sf <- create_potential_sf(odm_object = testdata$od_result,
filter_value_type = "distance",
accessibility_filter_value = 750,
search_direction = "to_target",
ors_profile = "foot-walking")
potential_sf <- aggregate_potential(aoi_sf = testdata$grid_500m,
pnt_sf = pot_sf,
id_col = "id",
crs = 4647)
coverage_sf <- aggregate_coverage_rate_by_threshold(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
threshold_col = "Min_Dist",
threshold_value = 350,
crs = 4647)
merged_sf <- merge_indicators(aoi_sf = testdata$grid_500m, id_col = "id",
expenses_sf, cumulative_sf, potential_sf,
coverage_sf)
min_dist_time_sf <- create_time_distance_sf(testdata$od_result)
expenses_sf <- aggregate_expenses(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
crs = 4647)
cnt_sf <- create_cumulative_sf(odm_object = testdata$od_result,
filter_value_type = "distance",
accessibility_filter_value = 750,
search_direction = "to_target")
cumulative_sf <- aggregate_accumulation(aoi_sf = testdata$grid_500m,
pnt_sf = cnt_sf,
id_col = "id",
crs = 4647)
pot_sf <- create_potential_sf(odm_object = testdata$od_result,
filter_value_type = "distance",
accessibility_filter_value = 750,
search_direction = "to_target",
ors_profile = "foot-walking")
potential_sf <- aggregate_potential(aoi_sf = testdata$grid_500m,
pnt_sf = pot_sf,
id_col = "id",
crs = 4647)
coverage_sf <- aggregate_coverage_rate_by_threshold(aoi_sf = testdata$grid_500m,
pnt_sf = min_dist_time_sf,
id_col = "id",
threshold_col = "Min_Dist",
threshold_value = 350,
crs = 4647)
merged_sf <- merge_indicators(aoi_sf = testdata$grid_500m, id_col = "id",
expenses_sf, cumulative_sf, potential_sf,
coverage_sf)
knitr::kable(head(merged_sf[1:8,], 5))
knitr::kable(head(merged_sf[,1:8], 5))
knitr::kable(head(merged_sf[1:8,], 5))
knitr::kable(head(merged_sf[[1:8,]], 5))
knitr::kable(head(merged_sf[[,1:8]], 5))
?head
knitr::kable(head(merged_sf[1:8], 5))
knitr::kable(head(merged_sf[1:7], 5))
knitr::kable(head(sf::st_drop_geometry(merged_sf), 5))
?odmind
??odmind
?odmind
packageDescription("odmind")
help(package="odmind")
usethis::use_gpl3_license()
devtools::document()
install.packages("pkgdown")
y
1
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
library(odmind)
detach("package:odmind", unload = TRUE)
pkgdown::build_site()
install.packages("cachem")
pkgdown::build_site()
usethis::use_github_action("pkgdown")
remotes::install_github("mschonlau/odmind")
library(odmind)
?odmind
?create_cumulative_by_cat_sf
.rs.restartR()
library(odmind)
?create_cumulative_by_cat_sf
?odmind
roxygen2::roxygenise()
?odmind
devtools::build_manual()
pkgdown::build_site()
help("odmin")
help("odmind")
??odmind
library(odmind)
?odmind
library(odmind)
?odmind
?odmind
devtools::document()
library(odmind)
?odmind
?abind
?odmind
remotes::install_github("mschonlau/odmind")
detach("package:odmind", unload = TRUE)
detach("package:odmind", unload = TRUE)
remotes::install_github("mschonlau/odmind")
?odmind
??odmind
??odmind
?odmind
